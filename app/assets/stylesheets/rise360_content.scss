// This file allows us to apply our own CSS to Rise360 Module content.
//
// It's a bit non-standard b/c we compile it as a standalone CSS file
// rather than bundle it together with other CSS for the layout b/c it's
// injected into the Rise360 content using Javascript. See:
// app/javascript/packs/rise360_module_versions.js.erb
//
// DEV NOTE: changes here won't take effect in development until you force
// Webpacker to recompile the above Javascript file

// ##########
// IMPORTANT: avoid adding styles here as much as possible!!!
// #########
// It's not maintainable to add styles here.  For everything we add, the odds
// of Rise360 changing their HTML and it just suddenly breaking one day causing us
// to rush out a fix and have to deal with both old and new HTML rises.
// We likely won't have a good way to proactively detect this either.
// Avoid this at all costs and make sure you've pushed back on the
// the Designer or Product Manager that is pushing for this change, being very
// clear that it's brittle and WILL just suddenly break one day causing fires and headaches.

@import "shared/variables";

/** Styles for injected HTML */
@keyframes fadeInRight {
    0% {
        opacity: 0;
        transform: translate3d(50px,0,0)
    }

    to {
        opacity: 1;
        transform: translateZ(0)
    }
}

div.bv-browser-warning-outer {
  animation: fadeInRight 1.2s ease-in-out;
  display: flex;
  justify-content: center;
  font-size: 120%;
  padding: 1.6rem;
}

div.bv-browser-warning-inner {
  border: 0.6rem solid $bv-oceanblue-600;
  border-radius: 0.6rem;
  margin-top: 6rem;
  padding: 4rem;
  width: $container-max-width-md;
}


//////////////////////////////////////////////////////////////////////
// Add custom styles to overwrite the Rise360 ones that we need below.
//////////////////////////////////////////////////////////////////////

/** Links */
.page__content .brand--linkColor a {
  color: $bv-oceanblue-600 !important;
  fill: $bv-oceanblue-600 !important;
}

.page__content .brand--linkColor a:visited {
  color: $bv-oceanblue-700 !important;
  fill: $bv-oceanblue-700 !important;
}

.page__content .brand--linkColorHover a:hover {
  color: $bv-oceanblue-700 !important;
  fill: $bv-oceanblue-700 !important;
}

/** Quizzes */

// Note: the "Incorrect" color is black, not red. Just leave it alone b/c there is no "incorrect"
// version of selectors to target.

// Checkmark in overall feedback when correct
.page__content div.quiz-card__feedback-icon.quiz-card__feedback-icon--correct.brand--color {
  color: green !important;
}

// Inline feedback
.page__content div.quiz-card__interactive {
  .quiz-multiple-choice-option--correct,
  .quiz-multiple-response-option--correct {

    // Checkmark inside radio for selected correct answer
    .icon.brand--color {
      color: green !important;
    }

    // Checkmark inside checkbox for correct answer (selected or not)
    .i-checkMark.brand--fill {
      fill: green !important;
    }

    // Border box around selected correct answer (both radios and checkboxes)
    .brand--beforeBorder:before {
      border-color: green !important;
    }
  }

  // Color of circle "correct" icon for fill-in-the-blank or matching game answers
  .quiz-fill, .quiz-match {
    .i-checkMarkFilled.brand--fill {
      fill: green !important;
    }
  }
}

// Hide overall "X Incorrect" icon and label for multiple choice checkboxes when in a Lesson
// (not a Mastery Quiz). We use these to have them think about the question and attempt to
// answer so we can give more context, but we don't expect them to get it all correct.
// This is VERY brittle b/c there is no way to tell if it's a radio list of checkbox list
// without javascript except looking at the aria-label
.page__content .block-knowledge div.block-knowledge__wrapper[aria-label*="Multiple Response"] {
  div.quiz-card__feedback-icon:not(.quiz-card__feedback-icon--correct),
  div.quiz-card__feedback-icon:not(.quiz-card__feedback-icon--correct) + .quiz-card__feedback-label {
    display: none;
  }
}

/** Rate This Module */

// See rise360_module_versions.js.erb for how the .rate-this-module class
// got on all these out-of-the-box Rise360 elements.
//
// Also, note that this is a bit of a babushka doll situation where this
// is the CSS for Rise360 content (aka a module) which is being applied to
// the elements responsible for iframing in the rate_this_module view.

.embed--iframe.rate-this-module {

  // On mobile, the iframe height is not respected from what you set
  // when authoring the Rise360 package. We have to unset some stuff that was locking
  // the height of the iframe on mobile so that we can set it to match the
  // content height for various screen width breakpoints.
  overflow: unset !important; // Originally set to hidden. Causes iframe content to not fill the space
  height: unset !important; // Originally set to 0 which causes stuff below to smoosh up.

  // Originally set to random big values (like 56.25% or even 107.143%). Seems to depend on whether an
  // absolute height is set in pixels when authoring the content. It caused crazy big whitespace
  // and led to folks thinking they were done with the entire Module.
  padding-bottom: 0 !important;
  margin-bottom: 0 !important; // Originally 2rem. Remove it (and padding) so we can add a buffer to min-height of the iframe

  iframe.rate-this-module {
    position: unset !important; // Originally set to absolute causing the divs after this to smoosh up into this

    // TODO: try to do the below dynamically in Javascript by measuring the content size,
    // https://app.asana.com/0/1174274412967132/1199964542142977
    //
    // Get rid of the scrollber by setting the height of the iframe to be big enough
    // for the content at various screen sizes (with a 40px buffer). Note that this could still
    // cause a scrollbar for some if their base font size is set bigger for example.

   // TODO: we're no longer iframed inside of Canvas. We should adjust the breakpoints and also the min heights.
   // https://app.asana.com/0/1174274412967132/1201150384153474
   // The breakpoints are non-standard to account for the fact that we're iframed inside Canvas
   // which takes up some of the screen for it's own stuff.
    // These measurements taken empirically just reflect my system, but different browsers
    // or resolutions or font settings could cause the content to be bigger. That's why a JS solution
    // to actually measure it would be better.
    min-height: 661px; // Smallest screen, biggest height
    @media all and (min-width: 500px) and (max-width: 921px) {
      min-height: 511px;
    }
    @media all and (min-width: 922px) and (max-width: 1130px) {
      min-height: 487px;
    }
    @media all and (min-width: 1131px) {
      min-height: 453px;  // Desktop.
    }

  }
}

// Get rid of the border and massive padding that was meant to make this
// very clearly identified as an iframe. I think the point was that you
// would have to click fullscreen or something and they just assuming the
// iframed content wouldn't be usable on mobile.
section.block-embed__item--border.rate-this-module {
  padding: 0;
  border: 0;
}

// Ignore the padding-bottom set in the iframe content settings. This is meant to be
// the very last thing in the Module and we want the scroll to hit 100% so they get
// full credit, so any extra whitespace here can make them think they're done and not
// keep scrolling.
.block-embed.rate-this-module {
  padding-bottom: 0 !important;
}
