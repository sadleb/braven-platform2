require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UsersController, type: :controller do
  render_views

  let(:user) { create :admin_user }

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { attributes_for(:admin_user) }

  let(:invalid_attributes) { { name: user.first_name } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'when logged in' do
    before do
      sign_in user
    end

    describe "GET #index" do
      it "returns a success response" do
        get :index, params: {}, session: valid_session
        expect(response).to be_successful
      end
    end

    describe "GET #show" do
      it "returns a success response" do
        get :show, params: { id: user.id }
        expect(response).to be_successful
      end
    end

    describe "GET #new" do
      it "returns a success response" do
        get :new, params: { id: user.id }
        expect(response).to be_successful
      end
    end

    describe "GET #edit" do
      it "returns a success response" do
        get :edit, params: { id: user.id }
        expect(response).to be_successful
      end
    end

    describe "POST #create" do
      context "with valid parameters" do
        it "creates a new user" do
          expect {
            post :create, params: { user: valid_attributes }
          }.to change(User, :count).by(1)
        end

        it "automatically confirms the user" do
          post :create, params: { user: valid_attributes }
          expect(User.last.confirmed_at).not_to be(nil)
        end

        it "automatically registers the user" do
          post :create, params: { user: valid_attributes }
          expect(User.last.registered_at).not_to be(nil)
        end
      end

      context "with invalid parameters" do
        it "does not create a user" do
          expect {
            post :create, params: { user: invalid_attributes }
          }.not_to change { User.count }
        end
      end
    end

    describe "POST #confirm" do
      let(:user_attributes) { attributes_for(:fellow_user) }
      it "sets the user confirmation time" do
        post :create, params: { user: user_attributes }
        user = User.last
        user.update!(confirmed_at: nil)
        post :confirm, params: { id: user.id }
        expect(User.find(user.id).confirmed_at).not_to eq(nil)
      end
    end

    describe "POST #register" do
      let(:user_attributes) { attributes_for(:fellow_user) }
      it "sets the user registered_at time" do
        post :create, params: { user: user_attributes }
        user = User.last
        user.update!(registered_at: nil)
        post :register, params: { id: user.id }
        expect(User.find(user.id).registered_at).not_to eq(nil)
      end
    end

    describe "PUT #update" do
      # Oddly enough, the role_ids actually do come through with a single empty string in the array
      # when none are set.
      let(:valid_update_attributes) { valid_attributes.merge({ role_ids: [""]}) }

      it "returns a success response" do
        put :update, params: { id: user.to_param, user: valid_update_attributes }
        expect(response).to redirect_to(user_path(user))
      end
    end

    describe "POST #delete" do
      it "deletes the user" do
        expect {
          delete :destroy, params: { id: user.id }
        }.to change(User, :count).by(-1)
      end

      it "redirects to index" do
        delete :destroy, params: { id: user.id }
        expect(response).to redirect_to(users_path)
      end
    end
  end
end
