version: "3.5"

services:
  platformweb:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # Allows you to build the container in production mode by setting in the .env file. Necessary here b/c puma
        # runs before the dotenv file is loaded so we build the value into the container. Defaults to development
        RAILS_ENV: ${RAILS_ENV:-development}
    ports:
      # rails server (Guardfile, config/environments/development.rb)
      - "3020:3020"
      # webpack-dev-server (config/webpacker.yml)
      - "3035:3035"
      # rack-livereload (config/environments/development.rb)
      - "35729:35729"
      # rspec server host port. The web server that rspec listens on when running tests. http://SPEC_HOST:SPEC_PORT
      - "49883:49883"
    volumes:
      - .:/app
      - /app/tmp
      - /app/log
      - node-modules:/app/node_modules
      - vendor-bundle:/app/vendor/bundle
      - webpack-cache:/app/tmp/cache/webpacker
    depends_on:
      - platform_chrome
      - platformdb
      - platform_redis_persistent
    env_file:
      - .env
    # These take precedence over any values in the above file.
    # Set them in your shell before using docker-compose so they get passed in. See the README for how to get them.
    environment:
      SALESFORCE_PLATFORM_CONSUMER_KEY: ${SALESFORCE_PLATFORM_CONSUMER_KEY}
      SALESFORCE_PLATFORM_CONSUMER_SECRET: ${SALESFORCE_PLATFORM_CONSUMER_SECRET}
      SALESFORCE_PLATFORM_USERNAME: ${SALESFORCE_PLATFORM_USERNAME}
      SALESFORCE_PLATFORM_PASSWORD: ${SALESFORCE_PLATFORM_PASSWORD}
      SALESFORCE_PLATFORM_SECURITY_TOKEN: ${SALESFORCE_PLATFORM_SECURITY_TOKEN}
      AWS_PLATFORM_FILES_BUCKET: ${AWS_PLATFORM_FILES_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}



    # Need privileged mode to change the sysctl flags in docker-compose/scripts/docker_compose_run.sh
    privileged: true

    networks:
      - bravendev
    command: ./docker-compose/scripts/docker_compose_run.sh

  platformdb:
    image: postgres:12
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - db-platform:/var/lib/postgresql/data
    networks:
      - bravendev

  # The long container name is to disambiguate from a non-persistent
  # redis instance, if we ever add one to use for caching in the future.
  # https://github.com/mperham/sidekiq/wiki/Using-Redis#multiple-redis-instances
  platform_redis_persistent:
    image: redis:6.2
    command: redis-server --appendonly yes
    container_name: redis-persistent
    ports:
      - "6379:6379"
    volumes:
      - redis-persistent:/data
    networks:
      - bravendev

  platform_chrome:
    image: selenium/standalone-chrome
    # SELENIUM_PORT
    ports: ['4444:4444']
    # remote debugging port
    ports: ['9222:9222']
    volumes:
      - /dev/shm:/dev/shm
    networks:
      - bravendev
    # Disable noisy logs.
    #logging:
    #  driver: none

volumes:
  db-platform:
  node-modules:
  vendor-bundle:
  webpack-cache:
  redis-persistent:

# Note all Braven web app docker dev envs use this same network so they can talk to each other.
# E.g. the hostname joinweb will resolve inside the ssoweb container if they are on the same docker network.
networks:
  bravendev:
    name: braven_dev_network
